/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ILayer, ILayerInterface } from "../../src/ILayer";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "layerConfig",
        type: "bytes",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "beforeCallResult",
        type: "bytes",
      },
    ],
    name: "afterCallValidation",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "layerConfig",
        type: "bytes",
      },
      {
        internalType: "bytes4",
        name: "selector",
        type: "bytes4",
      },
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "beforeCallValidation",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ILayer__factory {
  static readonly abi = _abi;
  static createInterface(): ILayerInterface {
    return new utils.Interface(_abi) as ILayerInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): ILayer {
    return new Contract(address, _abi, signerOrProvider) as ILayer;
  }
}
