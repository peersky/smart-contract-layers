/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockERC20,
  MockERC20Interface,
} from "../../../src/mocks/MockERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "burnFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200119138038062001191833981016040819052620000349162000216565b808383600362000045838262000332565b50600462000054828262000332565b5050506001600160a01b0381166200008757604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6200009281620000ff565b506001600160a01b038116620000f65760405162461bcd60e51b815260206004820152602260248201527f6d7573742073706563696679206f776e6572206f662074686520636f6e74726160448201526118dd60f21b60648201526084016200007e565b505050620003fe565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200017957600080fd5b81516001600160401b038082111562000196576200019662000151565b604051601f8301601f19908116603f01168101908282118183101715620001c157620001c162000151565b81604052838152602092508683858801011115620001de57600080fd5b600091505b83821015620002025785820183015181830184015290820190620001e3565b600093810190920192909252949350505050565b6000806000606084860312156200022c57600080fd5b83516001600160401b03808211156200024457600080fd5b620002528783880162000167565b945060208601519150808211156200026957600080fd5b50620002788682870162000167565b604086015190935090506001600160a01b03811681146200029857600080fd5b809150509250925092565b600181811c90821680620002b857607f821691505b602082108103620002d957634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200032d57600081815260208120601f850160051c81016020861015620003085750805b601f850160051c820191505b81811015620003295782815560010162000314565b5050505b505050565b81516001600160401b038111156200034e576200034e62000151565b62000366816200035f8454620002a3565b84620002df565b602080601f8311600181146200039e5760008415620003855750858301515b600019600386901b1c1916600185901b17855562000329565b600085815260208120601f198616915b82811015620003cf57888601518255948401946001909101908401620003ae565b5085821015620003ee5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610d83806200040e6000396000f3fe608060405234801561001057600080fd5b50600436106100f55760003560e01c806370a082311161009757806395d89b411161006657806395d89b4114610210578063a9059cbb14610218578063dd62ed3e1461022b578063f2fde38b1461027157600080fd5b806370a0823114610197578063715018a6146101cd57806379cc6790146101d55780638da5cb5b146101e857600080fd5b806323b872dd116100d357806323b872dd1461014d578063313ce5671461016057806340c10f191461016f57806342966c681461018457600080fd5b806306fdde03146100fa578063095ea7b31461011857806318160ddd1461013b575b600080fd5b610102610284565b60405161010f9190610b57565b60405180910390f35b61012b610126366004610bec565b610316565b604051901515815260200161010f565b6002545b60405190815260200161010f565b61012b61015b366004610c16565b610330565b6040516012815260200161010f565b61018261017d366004610bec565b610354565b005b610182610192366004610c52565b6104a2565b61013f6101a5366004610c6b565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b6101826104af565b6101826101e3366004610bec565b6104c3565b60055460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161010f565b6101026104d8565b61012b610226366004610bec565b6104e7565b61013f610239366004610c8d565b73ffffffffffffffffffffffffffffffffffffffff918216600090815260016020908152604080832093909416825291909152205490565b61018261027f366004610c6b565b6104f5565b60606003805461029390610cc0565b80601f01602080910402602001604051908101604052809291908181526020018280546102bf90610cc0565b801561030c5780601f106102e15761010080835404028352916020019161030c565b820191906000526020600020905b8154815290600101906020018083116102ef57829003601f168201915b5050505050905090565b600033610324818585610556565b60019150505b92915050565b60003361033e858285610568565b610349858585610637565b506001949350505050565b61035c6106e2565b73ffffffffffffffffffffffffffffffffffffffff8216610404576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4d6f636b45524332302d3e6d696e743a2041646472657373206e6f742073706560448201527f636966696564000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b80600003610494576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4d6f636b45524332302d3e6d696e743a20616d6f756e74206e6f74207370656360448201527f696669656400000000000000000000000000000000000000000000000000000060648201526084016103fb565b61049e8282610735565b5050565b6104ac3382610791565b50565b6104b76106e2565b6104c160006107ed565b565b6104ce823383610568565b61049e8282610791565b60606004805461029390610cc0565b600033610324818585610637565b6104fd6106e2565b73ffffffffffffffffffffffffffffffffffffffff811661054d576040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600060048201526024016103fb565b6104ac816107ed565b6105638383836001610864565b505050565b73ffffffffffffffffffffffffffffffffffffffff8381166000908152600160209081526040808320938616835292905220547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146106315781811015610622576040517ffb8f41b200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260248101829052604481018390526064016103fb565b61063184848484036000610864565b50505050565b73ffffffffffffffffffffffffffffffffffffffff8316610687576040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600060048201526024016103fb565b73ffffffffffffffffffffffffffffffffffffffff82166106d7576040517fec442f05000000000000000000000000000000000000000000000000000000008152600060048201526024016103fb565b6105638383836109ac565b60055473ffffffffffffffffffffffffffffffffffffffff1633146104c1576040517f118cdaa70000000000000000000000000000000000000000000000000000000081523360048201526024016103fb565b73ffffffffffffffffffffffffffffffffffffffff8216610785576040517fec442f05000000000000000000000000000000000000000000000000000000008152600060048201526024016103fb565b61049e600083836109ac565b73ffffffffffffffffffffffffffffffffffffffff82166107e1576040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600060048201526024016103fb565b61049e826000836109ac565b6005805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b73ffffffffffffffffffffffffffffffffffffffff84166108b4576040517fe602df05000000000000000000000000000000000000000000000000000000008152600060048201526024016103fb565b73ffffffffffffffffffffffffffffffffffffffff8316610904576040517f94280d62000000000000000000000000000000000000000000000000000000008152600060048201526024016103fb565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526001602090815260408083209387168352929052208290558015610631578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161099e91815260200190565b60405180910390a350505050565b73ffffffffffffffffffffffffffffffffffffffff83166109e45780600260008282546109d99190610d13565b90915550610a969050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526020819052604090205481811015610a6a576040517fe450d38c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015260248101829052604481018390526064016103fb565b73ffffffffffffffffffffffffffffffffffffffff841660009081526020819052604090209082900390555b73ffffffffffffffffffffffffffffffffffffffff8216610abf57600280548290039055610aeb565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604090208054820190555b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b4a91815260200190565b60405180910390a3505050565b600060208083528351808285015260005b81811015610b8457858101830151858201604001528201610b68565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b803573ffffffffffffffffffffffffffffffffffffffff81168114610be757600080fd5b919050565b60008060408385031215610bff57600080fd5b610c0883610bc3565b946020939093013593505050565b600080600060608486031215610c2b57600080fd5b610c3484610bc3565b9250610c4260208501610bc3565b9150604084013590509250925092565b600060208284031215610c6457600080fd5b5035919050565b600060208284031215610c7d57600080fd5b610c8682610bc3565b9392505050565b60008060408385031215610ca057600080fd5b610ca983610bc3565b9150610cb760208401610bc3565b90509250929050565b600181811c90821680610cd457607f821691505b602082108103610d0d577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8082018082111561032a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220294c05044f9406d6287cee1bad1acf32a54d4b1e9a5f22c7ec0c9287fcd0142264736f6c63430008140033";

type MockERC20ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockERC20ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockERC20__factory extends ContractFactory {
  constructor(...args: MockERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name_: string,
    symbol_: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<MockERC20> {
    return super.deploy(
      name_,
      symbol_,
      owner,
      overrides || {}
    ) as Promise<MockERC20>;
  }
  override getDeployTransaction(
    name_: string,
    symbol_: string,
    owner: string,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(name_, symbol_, owner, overrides || {});
  }
  override attach(address: string): MockERC20 {
    return super.attach(address) as MockERC20;
  }
  override connect(signer: Signer): MockERC20__factory {
    return super.connect(signer) as MockERC20__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC20Interface {
    return new utils.Interface(_abi) as MockERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockERC20;
  }
}
